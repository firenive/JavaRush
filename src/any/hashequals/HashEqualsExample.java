package any.hashequals;

public class HashEqualsExample {
    public static void main(String[] args) {
        Object object = new Object();
        int hCode;
        hCode = object.hashCode();
        System.out.println(hCode); //2001049719

        // hashCode - битовая строка фиксированной длины, полученная из массива произвольной длины. В java она
        // представлена в виде числа примитивного типа int, который равен 4-м байтам, и может помещать числа
        // от -2 147 483 648 до 2 147 483 647. Для одного и того-же входного объекта, хеш-код всегда будет одинаковым.

        // Поскольку диапазон значений int ограничен возможны ситуации, при которой разным объектам будет присвоен
        // одинаковый hashCode. Ситуация, когда у разных объектов одинаковые хеш-коды называется — коллизией.
        /* Если хеш-коды разные, то и входные объекты гарантированно разные.
            Если хеш-коды равны, то входные объекты не всегда равны.*/

        /*Эквивалентность и хеш-код тесно связанны между собой, поскольку хеш-код вычисляется на основании содержимого
         объекта (значения полей) и если у двух объектов одного и того же класса содержимое одинаковое, то и хеш-коды
         должны быть одинаковые*/

        //  Поэтому, при создании пользовательского класса, принято переопределять методы hashCode() и equals() таким
        //  образом, что бы учитывались поля объекта.
        // Примеры сравнение объектов, а также переопределения методов hashCode() и equals() написаны в классах
        // BlackBox и DemoBlackBox
    }
}
